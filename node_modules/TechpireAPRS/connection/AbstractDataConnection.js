var util = require('util')
	, net = require('net')
    , events = require('events')
	, EventEmitter = require('events').EventEmitter
    , AbstractAPRSMessage = require('../packets/AbstractAPRSMessage.js')
	;

var instance = null;

function AbstractDataConnection(args) {
    instance = this;
    
	if(!args) {
		return;
	}
	
    if(args._id) {
        instance.id = args._id;
    }
    
    if(args.connectionType) {
        instance.connectionType = args.connectionType;
    }
    
    instance.description = args.description;
    
    instance.callsign = args.callsign;
    
	instance.host = args.host;
	instance.port = args.port;
	
	instance.softwareName = args.softwareName;
	instance.softwareVersion = args.softwareVersion;
    
    instance.isTransmitEnabled = args.isTransmitEnabled;
	instance.isReconnectOnFailure = args.isReconnectOnFailure;
    instance.reconnectInterval = null;
	
	instance.socket = null;
    
    // These must be set last to avoid issues with automatically connecting to the server if the connection is enabled!
    instance._isEnabled = undefined;
    Object.defineProperty(instance, "isEnabled", {
        get: function() {
            return instance._isEnabled;
        }
        , set: function(value) {
            if(instance._isEnabled != value) {
                instance._isEnabled = value;

                // notify anybody listening the connection has been enabled/disabled
                instance.emit('connectionChange', value);

                if(value == true) {
                    console.log('enabling connection');
                    instance.Connect();
                } else {
                    console.log('disconnecting connection');
                    instance.Disconnect();
                }
            }
        }
    });
    
    instance.isEnabled = args.isEnabled;
}

util.inherits(AbstractDataConnection, EventEmitter);

AbstractDataConnection.prototype.Connect = function() {
    if(instance.socket) {
        console.log('Destroying connection');
        
        try {
            instance.socket.end();
        } catch (e) {
            console.log(e);   
        }
        
        try {
            instance.socket.destroy();
        } catch(e) {
            console.log(e);   
        }
        
        instance.socket = null;
    }
    
    instance.socket = new net.Socket();
    
	if(instance._isEnabled == true) {
        console.log('trying to connect');
        
		try {
			// connection to the APRS HOST
            instance.socket.connect(instance.port, instance.host, function() { });
            
            instance.Read();
            
            if(instance.reconnectInterval) {
                clearInterval(instance.reconnectInterval);
            }
		} catch(ex) {
            console.log(ex);
            
            if(instance.isReconnectOnFailure) {
                instance.reconnectInterval = setInterval(instance.Connect, 10000);
            }
            
			throw(ex);
		}
	}
};

AbstractDataConnection.prototype.Disconnect = function() {
    /*
     * DO NOT check _isEnabled.
     * We do not necessarily want to trigger an isEnabled event where apps are watching.
     *
     * We may want to leave the status of the connection as is in the database,
     * but disable it, say when reloading the window, or closing the app.
     */
    clearInterval(instance.reconnectInterval);
    
    try {
        instance.socket.end();
    } catch (e) {
        console.log(e);   
    }
    
    try {
        instance.socket.destroy();
    } catch(ex) {
        console.log(ex);
        instance.socket = null;
    }
}

AbstractDataConnection.prototype.Read = function() {
	instance.socket.on("error", function(err) {
		console.log("Error");
		console.log(err);
        
        clearInterval(instance.reconnectInterval);
        instance.socket.destroy();
	});
    
    instance.socket.on('close', function(had_error) {
        if(had_error && instance.isReconnectOnFailure) {
            instance.reconnectInterval = setInterval(instance.Connect, 10000);
        }
    });
}

AbstractDataConnection.prototype.Send = Send; //You set the prototype, but don't actually execute the function

function Send(message) { }

// Listeners


module.exports = AbstractDataConnection;
