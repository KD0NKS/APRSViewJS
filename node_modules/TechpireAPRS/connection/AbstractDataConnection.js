var util = require('util')
	, net = require('net')
	, EventEmitter = require('events').EventEmitter
    , AbstractAPRSMessage = require('../packets/AbstractAPRSMessage.js')
	;

var instance = null;

function AbstractDataConnection(args) {
    instance = this;
    
	if(!args) {
		return;
	}
	
    instance.id = args._id;
    
    instance.description = args.description;
    
    instance.callsign = args.callsign;
    
	instance.host = args.host;
	instance.port = args.port;
	
	instance.softwareName = args.softwareName;
	instance.softwareVersion = args.softwareVersion;
	
	instance.isEnabled = args.isEnabled;
    instance.isTransmitEnabled = args.isTransmitEnabled;
	instance.isReconnectOnFailure = args.isReconnectOnFailure;
    instance.reconnectInterval = null;
	
	instance.socket = null;
}

util.inherits(AbstractDataConnection, EventEmitter);

AbstractDataConnection.prototype.Connect = function() {
    if(instance.socket) {
        console.log('Destroying connection');
        
        try {
            instance.socket.end();
        } catch (e) {
            console.log(e);   
        }
        
        try {
        instance.socket.destroy();
        } catch(e) {
         console.log(e);   
        }
        
        instance.socket = null;
        
    }
    
    instance.socket = new net.Socket();
    
	if(instance.isEnabled === true) {
        console.log('trying to connect');
        
		try {
			// connection to the APRS HOST
            instance.socket.connect(instance.port, instance.host, function() { });
            
            instance.Read();
            
            if(instance.reconnectInterval) {
                clearInterval(instance.reconnectInterval);
            }
		} catch(ex) {
            console.log(ex);
            
            if(instance.isReconnectOnFailure) {
                instance.reconnectInterval = setInterval(instance.Connect, 10000);
            }
            
			throw(ex);
		}
	}
};

AbstractDataConnection.prototype.Read = function() {
	instance.socket.on("error", function(err) {
		console.log("Error");
		console.log(err);
	});
    
    instance.socket.on('close', function(had_error) {
        if(had_error && instance.isReconnectOnFailure) {
            instance.reconnectInterval = setInterval(instance.Connect, 10000);
        }
    });
}

AbstractDataConnection.prototype.Send = Send; //You set the prototype, but don't actually execute the function

function Send(message) { }

module.exports = AbstractDataConnection;
