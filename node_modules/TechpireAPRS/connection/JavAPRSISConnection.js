var util = require('util')
	, net = require('net')
	, events = require('events')
	, stream = require('stream')
	//, AbstractDataConnection = require('./AbstractDataConnection.js')
	//, APRSPacketParser = require('./APRSPacketParser.js');
	//, AbstractAPRSMessage = require('./AbstractAPRSMessage.js');
	//, APRSPositionReport = require('./APRSPositionReport.js');
	//, APRSMessage = require('./APRSMessage.js');
	;

function JavAPRSISConnection(data) {
	
}

module.exports = JavAPRSISConnection;

/*
function JavAPRSISConnection(data) {
	//AbstractDataConnection.call(this);
	//AbstractDataConnection.apply(this, Array.prototype.slice.call(arguments));
	AbstractDataConnection.call(this, data);

	this.serverLogin = data.serverLogin;

	/*
	events.EventEmitter.call(this);

	this.io = null; // socket connection to UI
	
	this.socket = new net.Socket();

	this.host = vars.host;
	this.port = vars.port;
	//this.host = '';
	//this.port = -1;
	
	this.isEnabled = false;
	this.isReconnectOnFailure = false;
	
	this.serverLogin = vars.serverLogin;
	//this.serverLogin = '';
	
	//throw new Error(host);
		
	this.__proto__ = new AbstractDataConnection();
		
	this.read = function read() {
		try {
			var parser = new APRSPacketParser();
			
			this.socket.on('data', function(data) {
				var packets = data.toString().split('\r\n');
				
				for(var x = 0; x < packets.length && packets[x] != ''; x++) {
					if(packets[x].toString()[0] != '#') {
						// parse the packet
						try {
							var rpt = parser.parse(packets[x]);
							
							// finding the message type in a nested if statement seems to be faster than storing the message types in an array to reduce the code
							if(rpt.messageType == '>') {
								// status report
							} else if(rpt.messageType == "$GPGGA,") {
								// GPPA
							} else if(rpt.messageType == '`'
									|| rpt.messageType == '\'') {
								// mic-e
								this.io.sockets.emit('position', rpt);
							} else if(rpt.messageType == '='
									|| rpt.messageType == '!'
									|| rpt.messageType == '@'
									|| rpt.messageType == '/') {
								// position report
								this.io.sockets.emit('position', rpt);
							} else if(rpt.messageType == '_') {
								// positionless weather report
							} else if(rpt.messageType == 'T') {
								// telemetry data
							} else if(rpt.messageType == ')') {
								//")" Item - bodyBytes.Length > 18
							} else if(rpt.messageType == ';') {
								//";" Object - bodyBytes.Length > 29
							} else if(rpt.messageType == '}') {
								//"}" Third-party traffic
							} else if(rpt.messageType == ':') {
								// message
								this.io.sockets.emit('message', rpt);
							}
						} catch(e) {
							//window.console.log('Parse Error: ' + e);
						}
					} else if(packets[x].indexOf("# javAPRSSrvr") == 0 || packets[x].indexOf("# aprsc") == 0) {
						//window.console.log('received: ' + packets[x]);
						
						try {
							//window.console.log('sending: ' + serverLogin);
							this.socket.write(this.serverLogin, 'utf8');
						} catch(e) {
							this.emit('Connection exception', e);
							//window.console.log(e);
						}
					}
				}
				
				
			});
			
			// connection to the APRS HOST
			//socket.connect(port, host, function() { });
			//JavAPRSISConnection.super_.prototype.connect.call(this);
			
		} catch(e) {
			throw e;
		}
	};
	
	this.connect = function() {
		try {
			// connection to the APRS HOST
			this.socket.connect(this.port, this.host, function() { });
			//this.socket = net.createConnection(port, host);
		} catch(ex) {
			throw(ex);
			//window.console.log(ex);
		}
	};
	
	return this;
	*
}

util.inherits(JavAPRSISConnection, AbstractDataConnection);
//util.inherits(JavAPRSISConnection, events.EventEmitter);

JavAPRSISConnection.prototype.read = function() {
	JavAPRSISConnection.super_.prototype.read(this);
	
	try {
		var parser = new APRSPacketParser();
		//var socket = new net.Socket();
		
		this.socket.on('data', function(data) {
			//node.console.log('received: ' + data.toString());
			var packets = data.toString().split('\r\n');
			
			for(var x = 0; x < packets.length && packets[x] != ''; x++) {
				if(packets[x].toString()[0] != '#') {
					// parse the packet
					try {
						var rpt = parser.parse(packets[x]);
						
						// finding the message type in a nested if statement seems to be faster than storing the message types in an array to reduce the code
						if(rpt.messageType == '>') {
							// status report
						} else if(rpt.messageType == "$GPGGA,") {
							// GPPA
						} else if(rpt.messageType == '`'
								|| rpt.messageType == '\'') {
							// mic-e
							io.sockets.emit('position', rpt);
						} else if(rpt.messageType == '='
								|| rpt.messageType == '!'
								|| rpt.messageType == '@'
								|| rpt.messageType == '/') {
							// position report
							io.sockets.emit('position', rpt);
						} else if(rpt.messageType == '_') {
							// positionless weather report
						} else if(rpt.messageType == 'T') {
							// telemetry data
						} else if(rpt.messageType == ')') {
							//")" Item - bodyBytes.Length > 18
						} else if(rpt.messageType == ';') {
							//";" Object - bodyBytes.Length > 29
						} else if(rpt.messageType == '}') {
							//"}" Third-party traffic
						} else if(rpt.messageType == ':') {
							// message
							io.sockets.emit('message', rpt);
						}
						
					} catch(e) {
						//window.console.log('Parse Error: ' + e);
					}
				} else if(packets[x].indexOf("# javAPRSSrvr") == 0 || packets[x].indexOf("# aprsc") == 0) {
					//window.console.log('received: ' + packets[x]);
					
					try {
						//window.console.log('sending: ' + serverLogin);
						socket.write(serverLogin, 'utf8');
					} catch(e) {
						//window.console.log(e);
					}
				}
			}
		});
		
		// connection to the APRS HOST
		//socket.connect(port, host, function() { });
		//this.super_.prototype.connect.call(this);
		JavAPRSISConnection.super_.prototype.connect(this);
	} catch(e) {
		throw e;
	}
};

module.exports = JavAPRSISConnection;


/*
function JavAPRSISConnection( ) {
	JavAPRSISConnection.super_.call(this);
	
	
	//var io = null; // socket connection to UI
	
	//var socket = new net.Socket();

	//var host = '';
	//var port = 0;
	
	//var isEnabled = false;
	//var isReconnectOnFailure = false;
	
	this.serverLogin = '';
}

util.inherits(JavAPRSISConnection, AbstractDataConnection);


*/