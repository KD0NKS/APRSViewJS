var util = require('util')
	, net = require('net')
	, EventEmitter = require('events').EventEmitter
	, stream = require('stream')
	, AbstractDataConnection = require('./AbstractDataConnection.js')
	, APRSPacketParser = require('../util/packets/APRSPacketParser.js');
	//, AbstractAPRSMessage = require('./AbstractAPRSMessage.js');
	//, APRSPositionReport = require('./APRSPositionReport.js');
	//, APRSMessage = require('./APRSMessage.js');
	;

var MESSAGE_DELIMITER = '\r\n';

function JavAPRSISConnection(args) {
	console.log(args);
	console.log(!args);
	console.log(args.length);

	if(!args) {
		return;
	}
	
	this.callsign = args['callsign'];
	this.passcode = args['passcode'];
	this.filter = args['filter'];
	
	AbstractDataConnection.apply(this, arguments);
	
	return this;
}

JavAPRSISConnection.prototype = new AbstractDataConnection();
JavAPRSISConnection.prototype.constructor = JavAPRSISConnection;

JavAPRSISConnection.prototype.Read = function() {
	try {
		var parser = new APRSPacketParser();
		
		this.socket.on('data', function(data) {
			var packets = data.toString().split('\r\n');
			
			for(var x = 0; x < packets.length && packets[x] != ''; x++) {
				if(packets[x].toString()[0] != '#') {
					// parse the packet
					try {
						var rpt = parser.parse(packets[x]);
						
						// finding the message type in a nested if statement seems to be faster than storing the message types in an array to reduce the code
						if(rpt.messageType == '>') {
							// status report
						} else if(rpt.messageType == "$GPGGA,") {
							// GPPA
						} else if(rpt.messageType == '`'
								|| rpt.messageType == '\'') {
							// mic-e
							console.log(rpt);
							//EventEmitter.emit('position', rpt);
						} else if(rpt.messageType == '='
								|| rpt.messageType == '!'
								|| rpt.messageType == '@'
								|| rpt.messageType == '/') {
							// position report
							console.log(rpt);
							//EventEmitter.emit('position', rpt);
						} else if(rpt.messageType == '_') {
							// positionless weather report
						} else if(rpt.messageType == 'T') {
							// telemetry data
						} else if(rpt.messageType == ')') {
							//")" Item - bodyBytes.Length > 18
						} else if(rpt.messageType == ';') {
							//";" Object - bodyBytes.Length > 29
						} else if(rpt.messageType == '}') {
							//"}" Third-party traffic
						} else if(rpt.messageType == ':') {
							// message
							console.log(rpt);
							//EventEmitter.emit('message', rpt);
						}
					} catch(e) {
						//console.log('Parse Error: ' + e);
					}
				} else if(packets[x].indexOf("# javAPRSSrvr") == 0 || packets[x].indexOf("# aprsc") == 0) {
					console.log('received: ' + packets[x]);
					
					try {
						//'user <callsign> pass <passcode> vers <softwareName> <softwareVersion> filter <filter>' + MESSAGE_DELIMITER
						
						console.log(this.callsign);
						console.log(this.softwareName);
						console.log(this.softwareVersion);
						console.log(this.filter);
						console.log(MESSAGE_DELIMITER);
						
						var serverLogin = 'user ' + this.callsign;
						serverLogin += 'vers ' + this.softwareName;
						
						if(this.softwareVersion != null && this.softwareVersion != '') {
							serverLogin += ' ' + this.softwareVersion;
						}
						
						if(this.filter != null && this.filter != '') {
							serverLogin += ' filter ' + this.filter;
						}
						
						serverLogin += MESSAGE_DELIMITER;
						
						console.log('sending: ' + serverLogin);
						
						this.socket.write(serverLogin, 'utf8');
					} catch(e) {
						console.log(e);
						//EventEmitter.emit('Connection exception', e);
					}
				}
			}
		});
	} catch(e) {
		throw e;
	}
};

//util.inherits(AbstractDataConnection, EventEmitter);
module.exports = JavAPRSISConnection;