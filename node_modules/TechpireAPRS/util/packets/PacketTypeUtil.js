function PacketType(data) {
    this.name = data.name;
    this.code = data.code;
    this.symbols = data.symbols; // THIS SHOULD BE AN ARRAY
};

function PacketTypeUtil() {
    var self = this;
    
    self.PacketTypes = [
        new PacketType({ name: 'GPGGA', code: 'GPGGA', symbols: [ '$GPGGA,', '$gpgga,' ] })
        , new PacketType({ name: 'Item', code: 'ITEM', symbols: [ ')' ] })
        , new PacketType({ name: 'Message', code: 'MESSAGE', symbols: [ ':' ] })
        , new PacketType({ name: 'Mic-E', code: 'MIC-E', symbols: [ '`', '\'' ]})
        , new PacketType({ name: 'Object', code: 'OBJECT', symbols: [ ';' ] })
        , new PacketType({ name: 'Status Report', code: 'STATUS_REPORT', symbols: [ '>' ] })
        , new PacketType({ name: 'Position Report', code: 'POSITION', symbols: [ '=', '!', '@', '/' ] })
        , new PacketType({ name: 'Weather Report', code: 'WX_REPORT', symbols: [ '_' ] })
        , new PacketType({ name: 'Telemetry', code: 'TELEMETRY', symbols: [ 'T' ] })
        , new PacketType({ name: 'Third Party', code: 'THIRD_PARTY', symbols: [ '}' ] })
    ];
    
    self.GetSymbolsByCode = function(code) {
        var packetTypes = self.PacketTypes.filter(function(packetType) {
            return packetType.code == code;
        });
        
        if(packetTypes.length > 0) {
            return packetTypes[0].symbols;
        } else {
            return null;
        }
    };
};

module.exports = PacketTypeUtil;