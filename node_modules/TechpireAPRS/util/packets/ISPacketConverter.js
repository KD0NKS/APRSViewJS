var AbstractPacketConverter = require('./AbstractPacketConverter.js')
, AbstractAPRSMessage = require('../../packets/AbstractAPRSMessage.js')
, APRSMessage = require('../../packets/APRSMessage.js')
, APRSPositionReport = require('../../packets/APRSPositionReport.js')
, ObjectReport = require('../../packets/ObjectReport.js')
;


function ISPacketConverter() {
	AbstractPacketConverter.apply(this, arguments);
}

ISPacketConverter.prototype = new AbstractPacketConverter();
ISPacketConverter.prototype.constructor = ISPacketConverter;

ISPacketConverter.prototype.ToOutputFormat = ToOutputFormat;

// Setting packet variables can have unintended consequences if you're reusing a packet.
// Let's avoid it for everybody's sanity incase they figure out some brilliant reason to
// reuse a packet other than testing.
function ToOutputFormat(packet) {
    var retVal = "";
    
    // assemble the header
    retVal += packet.callsign;
    retVal += '>'
    retVal += packet.destination
    retVal += ',:'
    retVal += packet.messageType
    
    if(packet instanceof APRSPositionReport) {
        // LATITUDE
        var retLat = '';
        // get the first 2 numbers, this is your degrees
        retLat = Math.abs(packet.latitude).toString().substring(0, Math.abs(packet.latitude).toString().indexOf('.'));
        retLat += packet.latitude.toString().substr(packet.latitude.toString().indexOf('.')) * 60;
        
        retVal += parseFloat(retLat).toFixed(2);
        
        if(packet.latitude < 0) {
            retVal += 'S';
        } else {
            retVal += 'N';
        }
        
        // SYMBOL TABLE
        retVal += packet.symbolTableId
        
        // LONGITUDE
        //retVal += '09438.92'
        
        // Longitude degrees
        var retLon = Math.abs(packet.longitude).toString().substring(0, Math.abs(packet.longitude).toString().indexOf('.')).toString();
        
        // pad degrees with leading 0s
        retVal += ("000" + retLon).slice(retLon.length);
        
        retLon = Math.abs(packet.longitude).toString().substr(Math.abs(packet.longitude).toString().indexOf('.')) * 60;
        
        retVal += parseFloat(retLon).toFixed(2);
        
        if(packet.longitude < 0) {
            retVal += 'W';
        } else {
            retVal += 'E';   
        }
        
        // SYMBOL CODE
        retVal += packet.symbolCode;
        
        // MESSAGE
        retVal += packet.message;
    }
    
    return retVal;
};

module.exports = ISPacketConverter;