function AbstractPacketConverter() {
	
}

AbstractPacketConverter.prototype.ToOutputFormat = ToOutputFormat;

function ToOutputFormat(packet) {}

AbstractPacketConverter.prototype.FormatMessage = function(packet) {
    var retVal = '';
    
    if(packet.addressee.length > 9 || packet.message.length > 67 || packet.number.length > 5) {
        throw new Error('Invalid message format');
    }
    
    retVal += ((packet.addressee + '         ').substr(0, 9));
    
    retVal += ':';
    retVal += packet.message.trim();
    
    if(packet.number.trim() && packet.number.trim() != '') {
        retVal += '{';
        retVal += packet.number.trim();
    }
    
    /*
    this.number = '';
	this.addressee = '';
	this.message = '';
	this.groupName = '';
    */
    
    return retVal;
};

AbstractPacketConverter.prototype.FormatPositionReport = function(packet) {
    var retVal = '';
    
    // LATITUDE
    var retLat = '';
    // get the first 2 numbers, this is your degrees
    var tempLat = Math.abs(packet.latitude).toString().substring(0, Math.abs(packet.latitude).toString().indexOf('.'));
    tempLat = ("00" + tempLat).slice(tempLat.length);
    retVal = tempLat;
    
    tempLat = packet.latitude.toString().substr(packet.latitude.toString().indexOf('.')) * 60;
    tempLat = parseFloat(tempLat).toFixed(2);
    retLat += ("00000" + tempLat).slice(tempLat.length);
    
    retVal += retLat;

    if(packet.latitude < 0) {
        retVal += 'S';
    } else {
        retVal += 'N';
    }

    // SYMBOL TABLE
    retVal += packet.symbolTableId

    // LONGITUDE
    // Longitude degrees
    var retLon = Math.abs(packet.longitude).toString().substring(0, Math.abs(packet.longitude).toString().indexOf('.')).toString();

    // pad degrees with leading 0s
    retVal += ("000" + retLon).slice(retLon.length);

    retLon = Math.abs(packet.longitude).toString().substr(Math.abs(packet.longitude).toString().indexOf('.')) * 60;

    retVal += parseFloat(retLon).toFixed(2);

    if(packet.longitude < 0) {
        retVal += 'W';
    } else {
        retVal += 'E';   
    }

    // SYMBOL CODE
    retVal += packet.symbolCode;

    // MESSAGE
    if(packet.message != null && packet.message != undefined && packet.message != '') {
        retVal += packet.message;
    }
    
    return retVal;
}

module.exports = AbstractPacketConverter;