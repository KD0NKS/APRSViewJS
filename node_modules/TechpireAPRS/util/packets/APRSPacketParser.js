var AbstractPacketParser = require('./AbstractPacketParser.js')
	, AbstractAPRSMessage = require('../../packets/AbstractAPRSMessage.js')
	, APRSPositionReport = require('../../packets/APRSPositionReport.js')
	, APRSMessage = require('../../packets/APRSMessage.js')
	, ObjectReport = require('../../packets/ObjectReport.js')
	;

function APRSPacketParser() {
	AbstractPacketParser.apply(this, arguments);
}

APRSPacketParser.prototype = new AbstractPacketParser();
APRSPacketParser.prototype.constructor = APRSPacketParser;

//Main public parsing function
APRSPacketParser.prototype.parse = function(packet) {
	var header = packet.split(':')[0];
	
	var body = packet.substring(packet.indexOf(':') + 1);
	
	var report = null;
	
	try {
		if(body.charAt(0) == '>') {
			if(body.charAt(6).toLowerCase() == "z") {
				this.extractTimeStamp(report, body);
			}
			
			report = new AbstractAPRSMessage();
			
			body = this.extractCommonFields(report, header, body, packet);
			this.extractStatusReport(report, body);
		} else if(body.indexOf("$GPGGA,") == 0) {     // Is this a GPGGA packet?
			//packet = ParseGppaPacket(packet, line);
			throw new Error(this.Messages.unknown);
		} else if(body.charAt(0) == '`'
				|| body.charAt(0) == '\'') {
			report = new APRSPositionReport();
			
			body = this.extractCommonFields(report, header, body, packet);
			body = this.extractMicE(report, body);
			
			report.isIconRotatable = this.isIconRotatable(report.symbolTableId, report.symbolCode, report.speed, report.direction);
		} else if(body.charAt(0) == '='
				|| body.charAt(0) == '!'
				|| body.charAt(0) == '@'
				|| body.charAt(0) == '/') {   // Is this a location/weather location packet?
			report = new APRSPositionReport();
			
			body = this.extractCommonFields(report, header, body, packet);
			
			// check to see if the packet contains a timestamp before the coordinates
			if(body.charAt(0) == '/' || body.charAt(0) == '@') {
				body = this.extractTimeStamp(report, body.substring(1));
			}
			
			body = this.extractPosition(report, body);
			
			report.isIconRotatable = this.isIconRotatable(report.symbolTableId, report.symbolCode, report.speed, report.direction);
		} else if(body.charAt(0) == '_') {    // Is this packet a Positionless Weather Report?
			//packet = ParsePositionlessWeatherPacket(packet, line);
			throw new Error(this.Messages.unknown);
		} else if(body.charAt(0) == 'T') {    //"T" Telemetry data - bodyBytes.Length > 18
			//throw new UnsupportedFormatAprsPacketException("Telemetry packets are not yet supported.");
			throw new Error(this.Messages.unknown);
		} else if(body.charAt(0) == ')') {    //")" Item - bodyBytes.Length > 18
			//throw new UnsupportedFormatAprsPacketException("Item packets are not yet supported.");
			throw new Error(this.Messages.unknown);
		} else if(body.charAt(0) == ';') {    //";" Object - bodyBytes.Length > 29
			report = new ObjectReport();
					
			body = this.extractCommonFields(report, header, body, packet);
			
			report.name = body.substr(0, 9).trim();
			
			// * indicates a live object
			// _ indicates a killed object
			report.indicator = body.charAt(9);
			
			body = this.extractTimeStamp(report, body.substring(10));
			
			if(body.charAt(0) == '/') { // assume compressed format
				console.log('OBJECT POSITION IN COMPRESSED FORMAT');
				throw new Error(this.Messages.unknown);
			} else { // lat/lng format
				body = this.extractPosition(report, body);
			}
			
			report.isIconRotatable = this.isIconRotatable(report.symbolTableId, report.symbolCode, report.speed, report.direction);
		} else if(body.charAt(0) == '}') {    //"}" Third-party traffic
			// TODO: CAN WE ASSUME THIS WILL ALWAYS BE APRS SPEC FORMAT?
			//AprsPacketParser parser = new AprsPacketParser();
			//packet = parser.ParseAprsPacket(line.Substring(1));
			throw new Error(this.Messages.unknown);
		} else if(body.charAt(0) == ':') {
			report = new APRSMessage();
			
			body = this.extractCommonFields(report, header, body, packet);
			
			this.extractMessage(report, body);
		} else {
			throw new Error(this.Messages.unknown);
		}

		//  UNSUPPORTED
		// '0x1c' !whitespace char ''! Current Mic-E Data (Rev 0 beta)
		// '0x1d' !whitespace char ''! Old Mic-E Data (Rev 0 beta)
		// '&' [Reserved — Map Feature]
		// '['Reserved — Shelter data with time]
		// '{' User-Defined APRS packet format
		// '.' [Reserved — Space weather]
		// "%" Agrelo DFJr / MicroFinder
		// "," Invalid data or test data
		// "#" Peet Bros U-II Weather Station
		// "$" Raw GPS data or Ultimeter 2000
		// "$ULTW"
		// "*" Peet Bros U-II Weather Station
		// else if(line.IndexOf(":<") > -1) {    // "<" Station Capabilities
		// else if(line.IndexOf("::") > -1) {    //":" Message 
		// else if(line.IndexOf(":?") > -1) {    //"?" Query

		// WILL NOT USE
		//"[" Maidenhead grid locator beacon (obsolete)

		// UNUSED
		//'"' [Unused] 
		//'(' [Unused] 
		//'\' [Unused]
		//']' [Unused]
		//'^' [Unused]
		//'-' [Unused] 

		// DO NOT USE
		//'0–9' [Do not use] 
		//'a–z' [Do not use]
		//'A–S' [Do not use]
		//'U–Z' [Do not use]
		//'~' [Do not use — TNC stream switch character]
		//"|" [Do not use — TNC stream switch character]
		
		
		
		return report;
	} catch(e) {
		throw(e);
	}
}

APRSPacketParser.prototype.extractCommonFields = function(report, header, body, packet) {
	report.receivedTime = new Date();
	
	//Store the raw packet in the position report object
	report.rawPacket = packet;
	
	//Extract the callsign from the packet
	header = this.extractCallsign(report, header);
	
	this.extractDestinationAndDigipeaters(report, header);
	
	// Extract the message type
	body = this.extractMessageType(report, body);
	
	return body;
}

//Retrieve the station's callsign from the raw packet
APRSPacketParser.prototype.extractCallsign = function (report, header) {
	report.callsign = header.split(">")[0];
	
	return header.split(">")[1];
}

//Retrieve the message section from the raw packet
APRSPacketParser.prototype.extractDestinationAndDigipeaters = function(report, header) {
	try {
		report.destination = header.split(',')[0].trim();
		report.digipeaters = header.split(',');
	} catch (e) { }
}

module.exports = APRSPacketParser;